// Code generated by MockGen. DO NOT EDIT.
// Source: metrics.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	domain "mflight-api/domain"
	reflect "reflect"
)

// MockSensor is a mock of Sensor interface
type MockSensor struct {
	ctrl     *gomock.Controller
	recorder *MockSensorMockRecorder
}

// MockSensorMockRecorder is the mock recorder for MockSensor
type MockSensorMockRecorder struct {
	mock *MockSensor
}

// NewMockSensor creates a new mock instance
func NewMockSensor(ctrl *gomock.Controller) *MockSensor {
	mock := &MockSensor{ctrl: ctrl}
	mock.recorder = &MockSensorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSensor) EXPECT() *MockSensorMockRecorder {
	return m.recorder
}

// GetMetrics mocks base method
func (m *MockSensor) GetMetrics(ctx context.Context) (domain.TimeSeriesMetrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetrics", ctx)
	ret0, _ := ret[0].(domain.TimeSeriesMetrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetrics indicates an expected call of GetMetrics
func (mr *MockSensorMockRecorder) GetMetrics(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetrics", reflect.TypeOf((*MockSensor)(nil).GetMetrics), ctx)
}
